# ===============================
# = DATA SOURCE
# ===============================
# Set here configurations for the database connection
spring.datasource.url=jdbc:mysql://localhost:3306/springboot_activemq_example
spring.datasource.username=root
spring.datasource.password=otoke
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================
# Show or not log for each sql query
spring.jpa.show-sql=true
# Hibernate ddl auto (create, create-drop, update): with "create-drop" the database
# schema will be automatically created afresh for every start of application
spring.jpa.hibernate.ddl-auto=create-drop
# Naming strategy
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyHbmImpl
spring.jpa.hibernate.naming.physical-strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect

# application.properties

# ... (existing properties) ...

# ActiveMQ Redelivery Policy and DLQ
# Enable non-blocking redelivery to avoid blocking other messages on the queue
spring.activemq.packages.trust-all=true
# Add if not already present, for custom message types
spring.jms.listener.acknowledge-mode=client
# Or auto, depending on how you want to handle acks with retries

# Configure a global redelivery policy for the broker (if using embedded)
# This is often configured directly on the broker, but Spring Boot offers some properties.
# For more fine-grained control, you might need a BrokerServiceCustomizer.
# However, for listeners, Spring's DefaultJmsListenerContainerFactory can be configured.

# Let's focus on configuring the listener container factory for retries,
# as this is more directly controlled by Spring Boot for consumers.
# We'll simulate an error in the listener to trigger this.
# The DLQ is often a convention (e.g., ActiveMQ.DLQ), or can be explicitly set.
